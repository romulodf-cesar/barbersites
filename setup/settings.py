"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')

TEMPLATE_APP_API_KEY = os.getenv('TEMPLATE_APP_API_KEY', '')


STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cms.apps.CmsConfig',
    'crm.apps.CrmConfig',
    'payments.apps.PaymentsConfig',
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'setup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'setup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent # Esta é a linha crucial para BASE_DIR
# DATABASES = {
#   'default': {
#       'ENGINE': 'django.db.backends.sqlite3',  # Define o motor do banco de dados como SQLite
#       'NAME': BASE_DIR / 'db.sqlite3',       # Define o caminho completo para o arquivo do banco de dados SQLite.
#                                              # BASE_DIR é uma variável do Django que aponta para a raiz do seu projeto.
#                                              # Isso criará (ou usará) um arquivo chamado db.sqlite3 na raiz do seu projeto.
#   }
# }

# Seu arquivo settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'barbearia_db',
        'USER': 'root',
        'PASSWORD': os.getenv('DB_PASSWORD', ''),  #
        'HOST': 'localhost',  # Ou o IP do seu servidor MySQL, se não for local
        'PORT': '3306',  # A porta padrão do MySQL. Mude se for diferente
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Esta linha é opcional, mas recomendada se estiver usando Django 3.2 ou superior.
# Garante que os campos de chave primária auto-gerados sejam BigAutoField (64-bit inteiro)
# para evitar problemas de esgotamento de IDs em projetos maiores.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ----------------------------------------------------------------------
# Configurações de E-mail
# ----------------------------------------------------------------------
# Define o backend de e-mail do Django. O 'smtp.EmailBackend' é o padrão para enviar via SMTP.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Para desenvolvimento, use console para ver os e-mails no terminal.
# Host do servidor SMTP (ex: 'smtp.gmail.com' para Gmail, ou o host do seu provedor).
EMAIL_HOST = 'sandbox.smtp.mailtrap.io' 
# Porta do servidor SMTP (geralmente 587 para TLS/STARTTLS, ou 465 para SSL).
EMAIL_PORT = 2525
# Habilita o uso de TLS (Transport Layer Security) para conexão segura. Essencial para a maioria dos servidores.
EMAIL_USE_TLS = False
# Habilita o uso de SSL (Secure Sockets Layer) para conexão segura. Use True se o seu servidor exigir SSL.
EMAIL_USE_SSL = False 
# Nome de usuário para autenticação no servidor SMTP (seu e-mail ou nome de usuário do provedor).
EMAIL_HOST_USER = 'a70abeb14b42fa' 
# Senha para autenticação no servidor SMTP.
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')


# (Opcional) Assunto padrão para e-mails enviados pelo Django (ex: reset de senha).
EMAIL_SUBJECT_PREFIX = '[BarberSites] ' 
# (Opcional) Endereço de e-mail padrão para ser usado como remetente.
DEFAULT_FROM_EMAIL = 'no-reply@barbersites.com.br' 

# ----------------------------------------------------------------------
# Para Testes e Desenvolvimento (MUITO RECOMENDADO USAR MAILTRAP OU CONSOLE BACKEND)
# ----------------------------------------------------------------------
# Se você estiver em DESENVOLVIMENTO, evite enviar e-mails reais. Use:
# 1. Console Backend (e-mails aparecem no terminal do Django):
#    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# 2. Mailtrap (ou serviço similar como MailHog):
#    Mailtrap é um serviço gratuito para testar e-mails. Ele "pega" os e-mails e os mostra em uma caixa de entrada falsa.
#    Substitua os dados de EMAIL_HOST, EMAIL_PORT, USER e PASSWORD pelos dados do seu Mailtrap.
#    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#    EMAIL_HOST = 'smtp.mailtrap.io' # Exemplo Mailtrap
#    EMAIL_PORT = 2525 # Exemplo Mailtrap
#    EMAIL_USE_TLS = True
#    EMAIL_HOST_USER = 'SEU_USUARIO_MAILTRAP'
#    EMAIL_HOST_PASSWORD = 'SUA_SENHA_MAILTRAP'

# Em PRODUÇÃO, use as configurações do seu provedor de e-mail real.


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# crie uma pasta static no pasta setup.
# python manage.py collectstatic
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'setup/static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# stripe listen --forward-to http://localhost:8000/payments/webhook/