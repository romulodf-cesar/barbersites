"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv
load_dotenv() 
from django.core.mail.backends.console import EmailBackend

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# Este é o bloco que lê as chaves de API e segredos
# Primeiro, tenta ler das variáveis de ambiente do servidor (PythonAnywhere, por exemplo)
# Se não encontrar (ambiente de desenvolvimento), ele tenta ler do .env local
def get_env_variable(var_name, default=None):
    return os.getenv(var_name, default)

SECRET_KEY = get_env_variable('SECRET_KEY')
CRM_TO_TEMPLATE_API_KEY = get_env_variable('CRM_TO_TEMPLATE_API_KEY')
STRIPE_PUBLIC_KEY = get_env_variable('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = get_env_variable('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = get_env_variable('STRIPE_WEBHOOK_SECRET')
TEMPLATE_TO_CRM_API_KEY = os.getenv('TEMPLATE_TO_CRM_API_KEY', '')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_variable("DEBUG", "false").lower() == "true"

ALLOWED_HOSTS = os.getenv(
    "ALLOWED_HOSTS",
    "localhost,127.0.0.1,.vercel.app,rafaalmeidadev.pythonanywhere.com"
).split(",")

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://*.vercel.app",
]

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Seus apps
    'crm.apps.CrmConfig',
    'payments.apps.PaymentsConfig',
    'api.apps.ApiConfig',
    # DRF e Autenticação
    'rest_framework',
    'rest_framework.authtoken', # Necessário para TokenAuthentication
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'setup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'setup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent # Esta é a linha crucial para BASE_DIR
# DATABASES = {
#   'default': {
#       'ENGINE': 'django.db.backends.sqlite3',  # Define o motor do banco de dados como SQLite
#       'NAME': BASE_DIR / 'db.sqlite3',       # Define o caminho completo para o arquivo do banco de dados SQLite.
#                                              # BASE_DIR é uma variável do Django que aponta para a raiz do seu projeto.
#                                              # Isso criará (ou usará) um arquivo chamado db.sqlite3 na raiz do seu projeto.
#   }
# }

# Seu arquivo settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': get_env_variable('DB_NAME'),
        'USER': get_env_variable('DB_USER'),
        'PASSWORD': get_env_variable('DB_PASSWORD'),  #
        'HOST': get_env_variable('DB_URL'),  # Ou o IP do seu servidor MySQL, se não for local
        'PORT': get_env_variable('DB_URL_PORT'),  # A porta padrão do MySQL. Mude se for diferente
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Esta linha é opcional, mas recomendada se estiver usando Django 3.2 ou superior.
# Garante que os campos de chave primária auto-gerados sejam BigAutoField (64-bit inteiro)
# para evitar problemas de esgotamento de IDs em projetos maiores.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Configurações do Django REST Framework
REST_FRAMEWORK = {
    # Define a classe de autenticação padrão para TODA a API.
    # Usaremos TokenAuthentication para a nossa API.
    # SessionAuthentication é bom para o admin do DRF, então podemos mantê-la.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # Define a classe de permissão padrão (opcional, mas boa prática).
    # 'IsAuthenticated' significa que apenas usuários autenticados podem acessar.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Configuração do Swagger/Spectacular
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Configurações do DRF-Spectacular (Swagger)
SPECTACULAR_SETTINGS = {
    'TITLE': 'API do Sistema CRM (BarberSites)',
    'DESCRIPTION': 'Endpoints para o Sistema de Templates consultar status e gerenciar assinaturas no CRM.',
    'VERSION': '1.0.0',
    # As URLs do seu projeto principal. O auto-discovery do DRF já deve pegar `api/`
    'SERVE_URLCONF': 'setup.urls',
    # Para garantir que a documentação do swagger seja servida na URL correta.
    'SCHEMA_PATH_PREFIX': '/api/v1/', # NOVO: Garante que a documentação seja gerada para a versão correta.
    # Configurações de segurança para o Swagger UI.
    'SECURITY': [
        {'TokenAuth': []} # Mantenha esta configuração
    ],
    'COMPONENTS': {
        'securitySchemes': {
            'TokenAuth': {
                'type': 'http',
                'scheme': 'token', # Isso diz ao Swagger para usar o prefixo "Token "
            }
        }
    },
    'SERVE_INCLUDE_SCHEMA': False, # Desativamos o JSON da schema na página principal.
}

# SECURE_PROXY_SSL_HEADER = ('HTTP_AUTHORIZATION', None)


# ----------------------------------------------------------------------
# Configurações de E-mail
# ----------------------------------------------------------------------
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'apikey' # Nome de usuário padrão para a API Key
# EMAIL_HOST_PASSWORD = EMAIL_HOST_PASSWORD,
# DEFAULT_FROM_EMAIL = 'barbersites2025@gmail.com'

# Adicione a configuração da API Web do SendGrid
# EMAIL_BACKEND = 'django_sendgrid_v5.SendgridBackend'
EMAIL_BACKEND = get_env_variable('EMAIL_BACKEND')
SENDGRID_API_KEY = get_env_variable('SENDGRID_API_KEY') # A mesma variável de ambiente que você já tem.
DEFAULT_FROM_EMAIL = get_env_variable('DEFAULT_FROM_EMAIL')


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.mailtrap.io'
# EMAIL_PORT = 2525
# EMAIL_USE_TLS = False
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'a70abeb14b42fa'
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
# DEFAULT_FROM_EMAIL = 'barbersites2025@gmail.com'


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# crie uma pasta static no pasta setup.
# python manage.py collectstatic
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'setup/static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# stripe listen --forward-to http://localhost:8000/payments/webhook/